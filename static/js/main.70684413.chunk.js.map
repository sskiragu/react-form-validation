{"version":3,"sources":["component/user-form.component.js","App.js","serviceWorker.js","index.js"],"names":["regExp","RegExp","formValid","isError","rest","isValid","Object","values","forEach","val","length","UserForm","props","onSubmit","e","preventDefault","state","console","log","formValChange","target","name","value","email","test","password","setState","this","noValidate","className","type","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qiBAEA,IAAMA,EAASC,OACX,0CAGEC,EAAY,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAAYC,EAAW,2BACpCC,GAAU,EAkBd,OAhBAC,OAAOC,OAAOJ,GAASK,SAAQ,SAAAC,GAEvBJ,IADAI,EAAIC,OAAS,MAOrBJ,OAAOC,OAAOH,GAAMI,SAAQ,SAAAC,GAEpBJ,EADQ,OAARI,KAODJ,GAGUM,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAeVC,SAAW,SAAAC,GACPA,EAAEC,iBAEEb,EAAU,EAAKc,OACfC,QAAQC,IAAI,EAAKF,OAEjBC,QAAQC,IAAI,qBAtBD,EA2BnBC,cAAgB,SAAAL,GACZA,EAAEC,iBADe,MAEOD,EAAEM,OAAlBC,EAFS,EAETA,KAAMC,EAFG,EAEHA,MACVnB,E,yVAAO,IAAQ,EAAKa,MAAMb,SAE9B,OAAQkB,GACJ,IAAK,OACDlB,EAAQkB,KACJC,EAAMZ,OAAS,EAAI,iCAAmC,GAC1D,MACJ,IAAK,QACDP,EAAQoB,MAAQvB,EAAOwB,KAAKF,GACtB,GACA,2BACN,MACJ,IAAK,WACDnB,EAAQsB,SACJH,EAAMZ,OAAS,EAAI,iCAAmC,GAMlE,EAAKgB,SAAL,aACIvB,WACCkB,EAAOC,KAjDZ,EAAKN,MAAQ,CACTK,KAAM,GACNE,MAAO,GACPE,SAAU,GACVtB,QAAS,CACLkB,KAAM,GACNE,MAAO,GACPE,SAAU,KAVH,E,sEAwDT,IACEtB,EAAYwB,KAAKX,MAAjBb,QAER,OACI,0BAAMU,SAAUc,KAAKd,SAAUe,YAAU,GACrC,yBAAKC,UAAU,cACX,uCACA,2BACIC,KAAK,OACLD,UAAW1B,EAAQkB,KAAKX,OAAS,EAAI,0BAA4B,eACjEW,KAAK,OACLU,SAAUJ,KAAKR,gBAElBhB,EAAQkB,KAAKX,OAAS,GACnB,0BAAMmB,UAAU,oBAAoB1B,EAAQkB,OAIpD,yBAAKQ,UAAU,cACX,wCACA,2BACIC,KAAK,QACLD,UAAW1B,EAAQoB,MAAMb,OAAS,EAAI,0BAA4B,eAClEW,KAAK,QACLU,SAAUJ,KAAKR,gBAElBhB,EAAQoB,MAAMb,OAAS,GACpB,0BAAMmB,UAAU,oBAAoB1B,EAAQoB,QAIpD,yBAAKM,UAAU,cACX,2CACA,2BACIC,KAAK,WACLD,UAAW1B,EAAQsB,SAASf,OAAS,EAAI,0BAA4B,eACrEW,KAAK,WACLU,SAAUJ,KAAKR,gBAElBhB,EAAQsB,SAASf,OAAS,GACvB,0BAAMmB,UAAU,oBAAoB1B,EAAQsB,WAIpD,4BAAQK,KAAK,SAASD,UAAU,4BAAhC,oB,GArGsBG,aCdvBC,MARf,WACE,OACE,yBAAKJ,UAAU,aACb,kBAAC,EAAD,QCGcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.70684413.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst regExp = RegExp(\r\n    /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/\r\n)\r\n\r\nconst formValid = ({ isError, ...rest }) => {\r\n    let isValid = false;\r\n\r\n    Object.values(isError).forEach(val => {\r\n        if (val.length > 0) {\r\n            isValid = false\r\n        } else {\r\n            isValid = true\r\n        }\r\n    });\r\n\r\n    Object.values(rest).forEach(val => {\r\n        if (val === null) {\r\n            isValid = false\r\n        } else {\r\n            isValid = true\r\n        }\r\n    });\r\n\r\n    return isValid;\r\n};\r\n\r\nexport default class UserForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n            isError: {\r\n                name: '',\r\n                email: '',\r\n                password: ''\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (formValid(this.state)) {\r\n            console.log(this.state)\r\n        } else {\r\n            console.log(\"Form is invalid!\");\r\n        }\r\n    };\r\n\r\n\r\n    formValChange = e => {\r\n        e.preventDefault();\r\n        const { name, value } = e.target;\r\n        let isError = { ...this.state.isError };\r\n\r\n        switch (name) {\r\n            case \"name\":\r\n                isError.name =\r\n                    value.length < 4 ? \"Atleast 4 characaters required\" : \"\";\r\n                break;\r\n            case \"email\":\r\n                isError.email = regExp.test(value)\r\n                    ? \"\"\r\n                    : \"Email address is invalid\";\r\n                break;\r\n            case \"password\":\r\n                isError.password =\r\n                    value.length < 6 ? \"Atleast 6 characaters required\" : \"\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            isError,\r\n            [name]: value\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const { isError } = this.state;\r\n\r\n        return (\r\n            <form onSubmit={this.onSubmit} noValidate>\r\n                <div className=\"form-group\">\r\n                    <label>Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className={isError.name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                        name=\"name\"\r\n                        onChange={this.formValChange}\r\n                    />\r\n                    {isError.name.length > 0 && (\r\n                        <span className=\"invalid-feedback\">{isError.name}</span>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Email</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        className={isError.email.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                        name=\"email\"\r\n                        onChange={this.formValChange}\r\n                    />\r\n                    {isError.email.length > 0 && (\r\n                        <span className=\"invalid-feedback\">{isError.email}</span>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Password</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        className={isError.password.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                        name=\"password\"\r\n                        onChange={this.formValChange}\r\n                    />\r\n                    {isError.password.length > 0 && (\r\n                        <span className=\"invalid-feedback\">{isError.password}</span>\r\n                    )}\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"btn btn-block btn-danger\">Create User</button>\r\n            </form>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport UserForm from './component/user-form.component';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <UserForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}